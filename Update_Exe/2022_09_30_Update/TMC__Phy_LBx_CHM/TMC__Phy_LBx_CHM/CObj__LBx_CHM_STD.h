#pragma once

#include "Interface_Code.h"

#include "CCommon_Error.h"
#include "CCommon_System.h"


class CObj__LBx_CHM_STD : public __IOBJ__STD_TYPE
{
private:
	CCommon_Error__USER_FNC mERROR__USER_FNC;

	//-------------------------------------------------------------------------
	CString sObject_Name;

	SCX__USER_LOG_CTRL xLOG_CTRL;
	int  iSim_Flag;


	//-------------------------------------------------------------------------
	// INTERNAL PROPERTY

	CX__VAR_STRING_CTRL  sCH__MSG;
	CX__VAR_STRING_CTRL  sCH__OBJ_STATUS;

	CX__VAR_STRING_CTRL  sCH__PUMP_VLV_OPEN_FLAG;
	CX__VAR_STRING_CTRL  sCH__PRESSURE_CTRL_FLAG;

	//.....
	CX__VAR_ANALOG_CTRL  aCH__PARA_PREHEAT_TIME;
	CX__VAR_ANALOG_CTRL  aCH__PARA_COOLING_TIME;
	CX__VAR_ANALOG_CTRL  aCH__PARA_PREMATERIAL_SLOT;	

	//
	CX__VAR_ANALOG_CTRL  aCH__CFG_DOOR_VALVE_OPEN_TIMEOUT;
	CX__VAR_ANALOG_CTRL  aCH__CFG_DOOR_VALVE_CLOSE_TIMEOUT;

	CX__VAR_ANALOG_CTRL  aCH__CFG_SLIT_VALVE_OPEN_TIMEOUT;
	CX__VAR_ANALOG_CTRL  aCH__CFG_SLIT_VALVE_CLOSE_TIMEOUT;

	//
	CX__VAR_ANALOG_CTRL  aCH__CFG_SOFT_PUMP_TIMEOUT;
	CX__VAR_ANALOG_CTRL  aCH__CFG_FAST_PUMP_PRESSURE_TORR;

	CX__VAR_ANALOG_CTRL  aCH__CFG_SOFT_PUMP_COMPLETE_STABLE_TIME;

	CX__VAR_ANALOG_CTRL  aCH__CFG_FAST_PUMP_TIMEOUT;
	CX__VAR_ANALOG_CTRL  aCH__CFG_VAC_PRESSURE_TORR;

	//
	CX__VAR_ANALOG_CTRL  aCH__CFG_SOFT_VENT_TIMEOUT;
	CX__VAR_ANALOG_CTRL  aCH__CFG_FAST_VENT_PRESSURE_TORR;

	CX__VAR_ANALOG_CTRL  aCH__CFG_ATM_PRESS_STS_TOLERANCE;

	CX__VAR_ANALOG_CTRL  aCH__CFG_FAST_VENT_TIMEOUT;
	CX__VAR_ANALOG_CTRL  aCH__CFG_ATM_PRESSURE_TORR;

	CX__VAR_ANALOG_CTRL  aCH__CFG_OVER_VENT_TIME;

	//
	CX__VAR_ANALOG_CTRL  aCH__CFG_SOFT_PUMP_DELAY_TIME;
	CX__VAR_ANALOG_CTRL  aCH__CFG_SOFT_VENT_DELAY_TIME;

	CX__VAR_ANALOG_CTRL  aCH__CFG_VALVE_CLOSE_DELAY_TIME;

	// 
	CX__VAR_ANALOG_CTRL  aCH__PRESSURE_TORR;
	CX__VAR_DIGITAL_CTRL dCH__PRESSURE_STATUS;

	CX__VAR_DIGITAL_CTRL dCH__SLIT_VALVE_STATUS;
	CX__VAR_STRING_CTRL  sCH__SLIT_VALVE_LOCK_FLAG;

	CX__VAR_DIGITAL_CTRL dCH__DOOR_VALVE_STATUS;

	//
	CX__VAR_DIGITAL_CTRL dCH__SLOT_STATUS[CFG_LBx__SLOT_SIZE];
	CX__VAR_STRING_CTRL  sCH__SLOT_TITLE[CFG_LBx__SLOT_SIZE];

	//
	SCX__ASYNC_TIMER_CTRL xI_ASYNC_TIMER;
	CX__VAR_ANALOG_CTRL  aCH__TIME_COUNT;
	CX__VAR_ANALOG_CTRL  aCH__PUMPING_ELAPSED_TIME;
	CX__VAR_ANALOG_CTRL  aCH__VENTING_ELAPSED_TIME;

	CX__VAR_ANALOG_CTRL  aCH_SV_UP__TIME_COUNT;
	CX__VAR_ANALOG_CTRL  aCH_SV_DOWN__TIME_COUNT;
	CX__VAR_ANALOG_CTRL  aCH_SV_OPEN__TIME_COUNT;
	CX__VAR_ANALOG_CTRL  aCH_SV_CLOSE__TIME_COUNT;
	CX__VAR_ANALOG_CTRL  aCFG_CH_CONVECT_ATM_HIGH_PRESS;
	CX__VAR_ANALOG_CTRL  aCH__CFG_MAX_SV_OPEN_DIFF_PRESS;
	CX__VAR_DIGITAL_CTRL dCH__CFG_PUMP_DOWN_OPTION;
	CX__VAR_ANALOG_CTRL  aCH__CFG_VAC_LOWER_TOLERANCE;
	CX__VAR_ANALOG_CTRL  aCH__CFG_VAC_UPPER_TOLERANCE;

	//
	CX__VAR_DIGITAL_CTRL dCH__CFG_HEATER_USE;
	CX__VAR_ANALOG_CTRL  aCH__CFG_HEATING_TIME;
	CX__VAR_STRING_CTRL  sCH__APP_HEATING_TIMECOUNT;
	CX__VAR_DIGITAL_CTRL dCH__CFG_HEATER_SOFT_VENT_USE;

	// TAS Channel ...
	CX__VAR_STRING_CTRL  sCH__TAS_RESET_REQ;
	CX__VAR_STRING_CTRL  sCH__TAS_ACTION_TIME_NOW[CFG_ACT__SIZE];
	CX__VAR_STRING_CTRL  sCH__TAS_ACTION_TIME_MIN[CFG_ACT__SIZE];
	CX__VAR_STRING_CTRL  sCH__TAS_ACTION_TIME_MAX[CFG_ACT__SIZE];
	CX__VAR_STRING_CTRL  sCH__TAS_ACTION_TIME_AVG[CFG_ACT__SIZE];
	CX__VAR_STRING_CTRL  sCH__TAS_ACTION_TIME_AVG_F[CFG_ACT__SIZE];
	CX__VAR_ANALOG_CTRL  aCH__TAS_ACTION_TIME_CNT[CFG_ACT__SIZE];
	//


	//-------------------------------------------------------------------------
	// EXTERNAL PROPERTY

	// OBJ INDE -----
	CString m_sLBx__MODULE_NAME;

	// DB OBJECT -----
	CX__VAR_DIGITAL_CTRL dEXT_CH__CFG_TRANSFER_MODE;
	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_REF_ATM_PRESSURE;
	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_REF_VAC_PRESSURE;

	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_SIM_SLOT_VLV_CLOSE_TIME;
	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_SIM_SLOT_VLV_OPEN_TIME;
	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_SIM_DOOR_VLV_CLOSE_TIME;
	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_SIM_DOOR_VLV_OPEN_TIME;

	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_SIM_LLx_SLOW_VENT_TIME;
	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_SIM_LLx_FAST_VENT_TIME;
	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_SIM_LLx_SLOW_PUMP_TIME;
	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_SIM_LLx_FAST_PUMP_TIME;

	CX__VAR_DIGITAL_CTRL dEXT_CH__CFG_LL1_SV_EXIST_FLAG;
	CX__VAR_DIGITAL_CTRL dEXT_CH__CFG_LL2_SV_EXIST_FLAG;

	// I/O OBJECT -----
	// VENT VLV
	CX__VAR_DIGITAL_CTRL doEXT_CH__SOFT_VENT_VLV__SET;
	CX__VAR_DIGITAL_CTRL doEXT_CH__FAST_VENT_VLV__SET;
	CX__VAR_DIGITAL_CTRL doEXT_CH__ATM_EQUAL_VLV__SET;

	// PUMP VLV
	CX__VAR_DIGITAL_CTRL doEXT_CH__SOFT_PUMP_VLV__SET;
	CX__VAR_DIGITAL_CTRL doEXT_CH__FAST_PUMP_VLV__SET;

	// SV OP/CL 
	CX__VAR_DIGITAL_CTRL doEXT_CH__LBx__SV_TM_OPEN;
	CX__VAR_DIGITAL_CTRL doEXT_CH__LBx__SV_TM_CLOSE;

	CX__VAR_DIGITAL_CTRL diEXT_CH__LBx__SV_TM_OPEN;
	CX__VAR_DIGITAL_CTRL diEXT_CH__LBx__SV_TM_CLOSE;

	// SV UP/DN 
	CX__VAR_DIGITAL_CTRL doEXT_CH__LBx__SV_UP;
	CX__VAR_DIGITAL_CTRL doEXT_CH__LBx__SV_DOWN;

	CX__VAR_DIGITAL_CTRL diEXT_CH__LBx__SV_UP;
	CX__VAR_DIGITAL_CTRL diEXT_CH__LBx__SV_DOWN;

	// DV 
	CX__VAR_DIGITAL_CTRL doEXT_CH__LBx__DV_OPEN;
	CX__VAR_DIGITAL_CTRL doEXT_CH__LBx__DV_CLOSE;

	CX__VAR_DIGITAL_CTRL diEXT_CH__LBx__DV_OPEN;
	CX__VAR_DIGITAL_CTRL diEXT_CH__LBx__DV_CLOSE;

	// SNS
	CX__VAR_DIGITAL_CTRL diEXT_CH__VAC_RB_RNE;
	CX__VAR_DIGITAL_CTRL diEXT_CH__ATM_RB_RNE;

	// PUMP OBJECT -----
	CII_EXT_OBJECT__CTRL *pPUMP__OBJ_CTRL;

	CX__VAR_STRING_CTRL   sEXT_CH__MON_PUMP_COMM_STS;
	CX__VAR_STRING_CTRL   sEXT_CH__MON_PUMP_RUN_STS;

	// GAUGE OBJECT -----
	CX__VAR_ANALOG_CTRL  aiEXT_CH__LBx__PRESSURE_TORR;

	CX__VAR_DIGITAL_CTRL dEXT_CH__PHY_TM__PRESS_STS;
	CX__VAR_ANALOG_CTRL  aEXT_CH__PHY_TM__PRESS_TORR;
	//

	
	//------------------------------------------------------------------------------
	// INIT ----- 
	CString sMODE__INIT;
	int  Call__INIT(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__INIT(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// ALL_GAS_VLV_CLOSE -----
	CString sMODE__ALL_GAS_VLV_CLOSE;
	int  Call__ALL_GAS_VLV_CLOSE(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// CL.PUMP_VLV -----
	CString sMODE__CL_PUMP_VLV;
	int  Call__CL_PUMP_VLV(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// OP.PUMP_VLV -----
	CString sMODE__OP_PUMP_VLV;
	int  Call__OP_PUMP_VLV(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// PUMP -----
	CString sMODE__PUMP;
	int  Call__PUMP(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__PUMP(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// VENT -----
	CString sMODE__VENT;
	int  Call__VENT(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int  Fnc__VENT(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// DOOR VLV CLOSE -----
	CString sMODE__DV_CLOSE;
	CString sMODE__DV_TRANSFER_CLOSE;
	int  Call__DV_CLOSE(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__DV_CLOSE(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// DOOR VLV OPEN -----
	CString sMODE__DV_OPEN;
	CString sMODE__DV_TRANSFER_OPEN;
	int  Call__DV_OPEN(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__DV_OPEN(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// SLIT VLV CLOSE -----
	CString sMODE__SV_CLOSE;
	CString sMODE__SV_TRANSFER_CLOSE;
	int  Call__SV_CLOSE(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__SV_CLOSE(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int  Is__SV_FULL_CLOSE(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// SLIT VLV OPEN -----
	CString sMODE__SV_OPEN;
	CString sMODE__SV_TRANSFER_OPEN;
	int  Call__SV_OPEN(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__SV_OPEN(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int  Is__SV_FULL_OPEN(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// PREPMATER -----
	CString sMODE__PREPMATER;
	int  Call__PREPMATER(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__PREPMATER(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// COMPMATER -----
	CString sMODE__COMPMATER;
	int  Call__COMPMATER(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__COMPMATER(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// IN_PROC -----
	CString sMODE__IN_PROC;
	int  Call__IN_PROC(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__IN_PROC(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// OUT_PROC -----
	CString sMODE__OUT_PROC;
	int  Call__OUT_PROC(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__OUT_PROC(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// AUTO CTRL ---------------
	// PUMP VLV CLOSE -----
	CString sMODE__AUTO_PUMP_VLV_CLOSE;
	int  Call__AUTO_PUMP_VLV_CLOSE(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__AUTO_PUMP_VLV_CLOSE(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// ...
	int  Check__PRESSURE_ATM(CII_OBJECT__ALARM* p_alarm,const int alarm_id);
	int  Check__PRESSURE_ATM_TO_DV_OPEN(CII_OBJECT__ALARM* p_alarm,const int alarm_id);

	int  Check__PRESSURE_VAC(CII_OBJECT__ALARM* p_alarm);

	int  Check__TRANSFER_VLV__CLOSE(CII_OBJECT__ALARM* p_alarm,const CString& act_name);

	int  Check__VENT_ALL_VLV__CLOSE(CII_OBJECT__ALARM* p_alarm);
	int  Check__PUMP_ALL_VLV__CLOSE(CII_OBJECT__ALARM* p_alarm);

	int  Check__PUMP_VLV__OPEN(CII_OBJECT__ALARM* p_alarm);
	void Update__PUMP_VLV_STS(CII_OBJECT__ALARM* p_alarm);

	int  Is_SV_CLOSE_CONDITION(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int  Is_DV_CLOSE_CONDITION(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	int  Fnc__VENT_ALL_VLV__CLOSE(CII_OBJECT__ALARM* p_alarm);
	int  Fnc__VENT_ALL_VLV__CLOSE_WITHOUT_EQUAL_VLV(CII_OBJECT__ALARM* p_alarm);
	int  Fnc__PUMP_ALL_VLV__CLOSE(CII_OBJECT__ALARM* p_alarm);

	int  Fnc__PUMP_SOFT_VLV__OPEN(CII_OBJECT__ALARM* p_alarm);
	int  Fnc__PUMP_SOFT_VLV__CLOSE(CII_OBJECT__ALARM* p_alarm);
	int  Fnc__PUMP_FAST_VLV__OPEN(CII_OBJECT__ALARM* p_alarm);

	int  Fnc__VENT_SOFT_VLV__OPEN(CII_OBJECT__ALARM* p_alarm);
	int  Fnc__VENT_FAST_VLV__OPEN(CII_OBJECT__ALARM* p_alarm);

	// ...
	int  Sub__SV_UP(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm, double dblTimeout);
	int  Sub__SV_DOWN(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm, double dblTimeout);
	int  Sub__SV_TM_OPEN(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm, double dblTimeout);
	int  Sub__SV_TM_CLOSE(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm, double dblTimeout);

	int  Check__SV_OPEN_MAX_DIFFERENTIAL_PRESS(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);


	//------------------------------------------------------------------------------
	void Mon__IO_MONITOR(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	void Mon__INTERLOCK(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	void Mon__PUMP_INTERLOCK(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	void Mon__SV_DV_OP_CL_STS(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	void Update__SV_STS(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	void Update__DV_STS(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// ...
	void Fnc__MSG(const CString &sMsg);		// sCH__MSG
	void Fnc__LOG(const CString &sMsg);


public:
	CObj__LBx_CHM_STD();
	~CObj__LBx_CHM_STD();

	//-------------------------------------------------------------------------
	int __DEFINE__CONTROL_MODE(obj,l_mode);
	int __DEFINE__VERSION_HISTORY(version);

	int __DEFINE__VARIABLE_STD(p_variable);
	int __DEFINE__ALARM(p_alarm);

	//-------------------------------------------------------------------------
	int __INITIALIZE__OBJECT(p_variable,p_ext_obj_create);

	//-------------------------------------------------------------------------
	int __CALL__CONTROL_MODE(mode,p_debug,p_variable,p_alarm);
	int __CALL__MONITORING(id,p_variable,p_alarm);
};
