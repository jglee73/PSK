#pragma once

#include "Interface_Code.h"
#include "CCommon_Error.h"


class CObj__PROCESS_STD : public __IOBJ__STD_TYPE
{
private:
	//-------------------------------------------------------------------------
	CString sObject_Name;

	// ...
	SCX__SEQ_INFO		  xSEQ_INFO;
	SCX__USER_LOG_CTRL	  xLOG_CTRL;

	SCX__RECIPE_FILE      xRCP_FILE;
	SCX__ASYNC_TIMER_CTRL xTIMER_ASYNC;

	// ...
	CString sPara__LLx_NAME;
	//


	//-------------------------------------------------------------------------
	//  INTERNAL PROPERTY

	// ...
	CX__VAR_STRING_CTRL	 sCH__OBJ_MSG;

	CX__VAR_DIGITAL_CTRL dCH__CFG_RECIPE_CTRL_MODE;

	CX__VAR_STRING_CTRL  sCH__CFG_PLASMA_DECHUCK_RCP_NAME;
	CX__VAR_DIGITAL_CTRL dCH__DATALOG_GATHERING_ENABLE_DISABLE;

	CX__VAR_STRING_CTRL  xCH__PRC_TOTAL_TIME_TO_CTC;
	CX__VAR_STRING_CTRL  xCH__PRC_CHANGE_TIME_TO_CTC;

	CX__VAR_STRING_CTRL  xCH__PRC_TOTAL_TIME;
	CX__VAR_STRING_CTRL  xCH__PRC_CUR_TIME;

	CX__VAR_ANALOG_CTRL  xCH__STEP_TOTAL_NUM;
	CX__VAR_ANALOG_CTRL  xCH__STEP_CUR_NUM;
	CX__VAR_STRING_CTRL  xCH__LAST_STEP_FLAG;

	CX__VAR_STRING_CTRL  xCH__LOOP_MSG;

	CX__VAR_STRING_CTRL  sCH__PARA_PROCESS_TYPE;

	// ...
	CX__VAR_ANALOG_CTRL  aCH__SVID_PROCESS_STATE;
	CX__VAR_ANALOG_CTRL  aCH__SVID_CLEAN_COUNT;

	CX__VAR_STRING_CTRL  xCH__PRC_STS;
	CX__VAR_STRING_CTRL  xCH__CHM_STATE;

	CX__VAR_STRING_CTRL  sCH__RCP_FILE_UPLOAD_FLAG;

	CX__VAR_STRING_CTRL  sCH__ACT_RECOVERY_RESTART_FLAG;

	//
	CX__VAR_STRING_CTRL  sCH__NEXT_STEP_CTRL_FLAG;
	CX__VAR_STRING_CTRL  sCH__NEXT_STEP_CTRL_REQ;

	//
	CX__VAR_STRING_CTRL  sCH__PROCESS_STATUS_FLAG;

	//
	CX__VAR_STRING_CTRL  sCH__PMC_RECV_APC_APPLY;
	CX__VAR_STRING_CTRL  sCH__PMC_RECV_APC_DATA;

	// ...
	int iPROC_START_FLAG;

	CX__VAR_STRING_CTRL  sCH__LOCK_FLAG__ABORT;
	CX__VAR_STRING_CTRL  sCH__LOCK_FLAG__END;
	CX__VAR_STRING_CTRL  sCH__LOCK_FLAG__SKIP;
	CX__VAR_STRING_CTRL  sCH__LOCK_FLAG__JUMP;
	CX__VAR_STRING_CTRL  sCH__LOCK_FLAG__PAUSE;
	CX__VAR_STRING_CTRL  sCH__LOCK_FLAG__RESUME;

	CX__VAR_STRING_CTRL  sCH__EXCEPTION_ACT;
	CX__VAR_STRING_CTRL  sCH__EXCEPTION_LAST_ACT;
	CX__VAR_STRING_CTRL  sCH__EXCEPTION_MSG;

	//
	CX__VAR_ANALOG_CTRL  aCH__JUMP_STEP_ID;
	CX__VAR_ANALOG_CTRL  aCH__CONTINUE_OVER_STEP_TIME;

	CX__VAR_STRING_CTRL  sCH__WIN_CTRL_JUMP_PAGE;
	CX__VAR_STRING_CTRL  sCH__WIN_CTRL_LOCK;
	CX__VAR_STRING_CTRL  sCH__WIN_CTRL_MSG;

	//
	CX__VAR_STRING_CTRL  sCH__PRC_REAL_CHART_START;		// Real Chart Start Flag

	CX__VAR_DIGITAL_CTRL dRCP_CH__PROCESS_DATA_SUMMARY;
	CX__VAR_STRING_CTRL  sCH__WAFER_STATUS_CONVERTED_TO_PROCESSED_BY_PMC_REQ_COUNT;
	//


	//-------------------------------------------------------------------------
	//  EXTERNAL PROPERTY

	// OBJ  DB_INF
	CX__VAR_STRING_CTRL  sEXT_CH__RCP_NAME;

	CX__VAR_DIGITAL_CTRL dEXT_CH__SLOT01_STATUS;
	CX__VAR_STRING_CTRL  sEXT_CH__SLOT01_TITLE;

	CX__VAR_STRING_CTRL  sEXT_CH__SLOT01_LOTID;
	CX__VAR_STRING_CTRL  sEXT_CH__SLOT01_MATERIALID;
	CX__VAR_STRING_CTRL  sEXT_CH__SLOT01_PORTID;
	CX__VAR_STRING_CTRL  sEXT_CH__SLOT01_SLOTID;	

	// OBJ  DB_SYS
	CX__VAR_STRING_CTRL  sEXT_CH__SYSTEM_PROCESS_FLAG;
	CX__VAR_STRING_CTRL  sEXT_CH__SYSTEM_PROCESS_STEP_ID;
	CX__VAR_STRING_CTRL  sEXT_CH__SYSTEM_PROCESS_LAST_STEP_FLAG;

	CX__VAR_STRING_CTRL  sEXT_CH__SYS_CTRL_LOCK;
	CX__VAR_STRING_CTRL  sEXT_CH__SYS_FNC_LOCK;

	// OBJ  OPR
	CX__VAR_DIGITAL_CTRL dEXT_CH__SYSTEM_OBJ_STATUS;

	// OBJ  CHM
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__CHM;

	// OBJ : LOG ...
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__LOG;
	int iLOG_ID;

	CX__VAR_STRING_CTRL xEXT_CH__LOG_LOTID;
	CX__VAR_STRING_CTRL xEXT_CH__LOG_RECIPEID;
	CX__VAR_STRING_CTRL xEXT_CH__LOG_PORTID;
	CX__VAR_STRING_CTRL xEXT_CH__LOG_SLOTID;

	CX__VAR_STRING_CTRL xEXT_CH__LOG_SUB_DIR;
	CX__VAR_STRING_CTRL xEXT_CH__LOG_FILE_NAME;	

	// LINK_DB : RCP ...

	// LINK_DB : STEP ...
	CII_EXT_OBJECT__CTRL *pOBJ_CTRL__STEP;

	CX__VAR_STRING_CTRL  xEXT_CH__CUR_PROC_TYPE;
	CX__VAR_STRING_CTRL  sEXT_CH__RCP_FILE_PATH;

	CX__VAR_ANALOG_CTRL  aEXT_CH__RCP__LOOP_START;
	CX__VAR_ANALOG_CTRL  aEXT_CH__RCP__LOOP_REPEAT;

	CX__VAR_ANALOG_CTRL  aEXT_CH__CFG_PARA_STEP_TIME;
	CX__VAR_ANALOG_CTRL  aEXT_CH__STEP_TIME;
	CX__VAR_STRING_CTRL  sEXT_CH__STEP_EXCEPTION_COMMAND;

	CX__VAR_STRING_CTRL  sEXT_CH__EXCEPTION_CONTINUE_REQ;
	CX__VAR_STRING_CTRL  sEXT_CH__EXCEPTION_CONTINUE_STEP_OVER_TIME;
	//


	//-------------------------------------------------------------------------
	// ...
	CString sMODE__INIT;
	int  Call__INIT(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// ...
	CString sMODE__PROC_READY;
	int  Call__PROC_READY(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int  Fnc__PROC_READY(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	CString sMODE__PROC_START;
	int  Call__PROC_START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int  _Fnc__PROC_START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int  _Main__PROC_START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int  _Sub__PROC_STEP_START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	int  _Sub__PROC_CFG_START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	// ...
	CString sMODE__PRE_READY;
	int Call__PRE_READY(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	CString sMODE__PRE_START;
	int Call__PRE_START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	//
	CString sMODE__CLN_READY;
	int Call__CLN_READY(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	CString sMODE__CLN_START;
	int Call__CLN_START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	//
	CString sMODE__MNT_READY;
	int Call__MNT_READY(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	CString sMODE__MNT_START;
	int Call__MNT_START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	//
	CString sMODE__JOB_STRT_READY;
	int Call__JOB_START_READY(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	CString sMODE__JOB_END_READY;
	int Call__JOB_END_READY(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);

	//
	CString sMODE__IDLE_STRT;
	int Call__IDLE_START(CII_OBJECT__VARIABLE* p_variable,CII_OBJECT__ALARM* p_alarm);
	//

	// ...
	void Mon__PROC_EXCEPTION_CTRL(CII_OBJECT__VARIABLE *p_variable,CII_OBJECT__ALARM *p_alarm);
	void Fnc__SYSTEM_LOCK_CTRL(CII_OBJECT__VARIABLE *p_variable);

	// ...
	int  Fnc__PRC_LOG__ENABLE(CII_OBJECT__VARIABLE *p_variable);
	int  Fnc__PRC_LOG__DISABLE(CII_OBJECT__VARIABLE *p_variable);
	int  Fnc__PRC_LOG__PAUSE(CII_OBJECT__VARIABLE *p_variable);
	int  Fnc__PRC_LOG__RESUME(CII_OBJECT__VARIABLE *p_variable);
	//


public:
	CObj__PROCESS_STD();
	~CObj__PROCESS_STD();

	//-------------------------------------------------------------------------
	int __DEFINE__CONTROL_MODE(obj,l_mode);
	int __DEFINE__VERSION_HISTORY(version);
	
	int __DEFINE__VARIABLE_STD(p_variable);
	int __DEFINE__ALARM(p_alarm);

	int __Define__USER_FUNCTION(CII_DEFINE__FUNCTION *p_fnc_ctrl);

	//-------------------------------------------------------------------------
	int __INITIALIZE__OBJECT(p_variable,p_ext_obj_create);

	//-------------------------------------------------------------------------
	int __CALL__CONTROL_MODE(mode,p_debug,p_variable,p_alarm);
	int __CALL__MONITORING(id,p_variable,p_alarm);
};
